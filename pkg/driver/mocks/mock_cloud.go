// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/aws-fsx-csi-driver/pkg/cloud (interfaces: Cloud)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=./pkg/driver/mocks/mock_cloud.go --build_flags=--mod=mod sigs.k8s.io/aws-fsx-csi-driver/pkg/cloud Cloud
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	cloud "sigs.k8s.io/aws-fsx-csi-driver/pkg/cloud"
)

// MockCloud is a mock of Cloud interface.
type MockCloud struct {
	ctrl     *gomock.Controller
	recorder *MockCloudMockRecorder
	isgomock struct{}
}

// MockCloudMockRecorder is the mock recorder for MockCloud.
type MockCloudMockRecorder struct {
	mock *MockCloud
}

// NewMockCloud creates a new mock instance.
func NewMockCloud(ctrl *gomock.Controller) *MockCloud {
	mock := &MockCloud{ctrl: ctrl}
	mock.recorder = &MockCloudMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloud) EXPECT() *MockCloudMockRecorder {
	return m.recorder
}

// CreateFileSystem mocks base method.
func (m *MockCloud) CreateFileSystem(ctx context.Context, volumeName string, fileSystemOptions *cloud.FileSystemOptions) (*cloud.FileSystem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileSystem", ctx, volumeName, fileSystemOptions)
	ret0, _ := ret[0].(*cloud.FileSystem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileSystem indicates an expected call of CreateFileSystem.
func (mr *MockCloudMockRecorder) CreateFileSystem(ctx, volumeName, fileSystemOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileSystem", reflect.TypeOf((*MockCloud)(nil).CreateFileSystem), ctx, volumeName, fileSystemOptions)
}

// DeleteFileSystem mocks base method.
func (m *MockCloud) DeleteFileSystem(ctx context.Context, fileSystemId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileSystem", ctx, fileSystemId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFileSystem indicates an expected call of DeleteFileSystem.
func (mr *MockCloudMockRecorder) DeleteFileSystem(ctx, fileSystemId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileSystem", reflect.TypeOf((*MockCloud)(nil).DeleteFileSystem), ctx, fileSystemId)
}

// DescribeFileSystem mocks base method.
func (m *MockCloud) DescribeFileSystem(ctx context.Context, fileSystemId string) (*cloud.FileSystem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFileSystem", ctx, fileSystemId)
	ret0, _ := ret[0].(*cloud.FileSystem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFileSystem indicates an expected call of DescribeFileSystem.
func (mr *MockCloudMockRecorder) DescribeFileSystem(ctx, fileSystemId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileSystem", reflect.TypeOf((*MockCloud)(nil).DescribeFileSystem), ctx, fileSystemId)
}

// FindFileSystemByVolumeName mocks base method.
func (m *MockCloud) FindFileSystemByVolumeName(ctx context.Context, volumeName string) (*cloud.FileSystem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFileSystemByVolumeName", ctx, volumeName)
	ret0, _ := ret[0].(*cloud.FileSystem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFileSystemByVolumeName indicates an expected call of FindFileSystemByVolumeName.
func (mr *MockCloudMockRecorder) FindFileSystemByVolumeName(ctx, volumeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFileSystemByVolumeName", reflect.TypeOf((*MockCloud)(nil).FindFileSystemByVolumeName), ctx, volumeName)
}

// ResizeFileSystem mocks base method.
func (m *MockCloud) ResizeFileSystem(ctx context.Context, fileSystemId string, newSizeGiB int32) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeFileSystem", ctx, fileSystemId, newSizeGiB)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResizeFileSystem indicates an expected call of ResizeFileSystem.
func (mr *MockCloudMockRecorder) ResizeFileSystem(ctx, fileSystemId, newSizeGiB any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeFileSystem", reflect.TypeOf((*MockCloud)(nil).ResizeFileSystem), ctx, fileSystemId, newSizeGiB)
}

// WaitForFileSystemAvailable mocks base method.
func (m *MockCloud) WaitForFileSystemAvailable(ctx context.Context, fileSystemId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForFileSystemAvailable", ctx, fileSystemId)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForFileSystemAvailable indicates an expected call of WaitForFileSystemAvailable.
func (mr *MockCloudMockRecorder) WaitForFileSystemAvailable(ctx, fileSystemId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForFileSystemAvailable", reflect.TypeOf((*MockCloud)(nil).WaitForFileSystemAvailable), ctx, fileSystemId)
}

// WaitForFileSystemResize mocks base method.
func (m *MockCloud) WaitForFileSystemResize(ctx context.Context, fileSystemId string, resizeGiB int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForFileSystemResize", ctx, fileSystemId, resizeGiB)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForFileSystemResize indicates an expected call of WaitForFileSystemResize.
func (mr *MockCloudMockRecorder) WaitForFileSystemResize(ctx, fileSystemId, resizeGiB any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForFileSystemResize", reflect.TypeOf((*MockCloud)(nil).WaitForFileSystemResize), ctx, fileSystemId, resizeGiB)
}
