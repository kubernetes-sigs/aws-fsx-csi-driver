// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/aws-fsx-csi-driver/pkg/cloud (interfaces: FSx)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=./pkg/cloud/mocks/mock_fsx.go --build_flags=--mod=mod sigs.k8s.io/aws-fsx-csi-driver/pkg/cloud FSx
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	fsx "github.com/aws/aws-sdk-go-v2/service/fsx"
	gomock "go.uber.org/mock/gomock"
)

// MockFSx is a mock of FSx interface.
type MockFSx struct {
	ctrl     *gomock.Controller
	recorder *MockFSxMockRecorder
	isgomock struct{}
}

// MockFSxMockRecorder is the mock recorder for MockFSx.
type MockFSxMockRecorder struct {
	mock *MockFSx
}

// NewMockFSx creates a new mock instance.
func NewMockFSx(ctrl *gomock.Controller) *MockFSx {
	mock := &MockFSx{ctrl: ctrl}
	mock.recorder = &MockFSxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFSx) EXPECT() *MockFSxMockRecorder {
	return m.recorder
}

// CreateFileSystem mocks base method.
func (m *MockFSx) CreateFileSystem(arg0 context.Context, arg1 *fsx.CreateFileSystemInput, arg2 ...func(*fsx.Options)) (*fsx.CreateFileSystemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFileSystem", varargs...)
	ret0, _ := ret[0].(*fsx.CreateFileSystemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileSystem indicates an expected call of CreateFileSystem.
func (mr *MockFSxMockRecorder) CreateFileSystem(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileSystem", reflect.TypeOf((*MockFSx)(nil).CreateFileSystem), varargs...)
}

// DeleteFileSystem mocks base method.
func (m *MockFSx) DeleteFileSystem(arg0 context.Context, arg1 *fsx.DeleteFileSystemInput, arg2 ...func(*fsx.Options)) (*fsx.DeleteFileSystemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFileSystem", varargs...)
	ret0, _ := ret[0].(*fsx.DeleteFileSystemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFileSystem indicates an expected call of DeleteFileSystem.
func (mr *MockFSxMockRecorder) DeleteFileSystem(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileSystem", reflect.TypeOf((*MockFSx)(nil).DeleteFileSystem), varargs...)
}

// DescribeFileSystems mocks base method.
func (m *MockFSx) DescribeFileSystems(arg0 context.Context, arg1 *fsx.DescribeFileSystemsInput, arg2 ...func(*fsx.Options)) (*fsx.DescribeFileSystemsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFileSystems", varargs...)
	ret0, _ := ret[0].(*fsx.DescribeFileSystemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFileSystems indicates an expected call of DescribeFileSystems.
func (mr *MockFSxMockRecorder) DescribeFileSystems(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileSystems", reflect.TypeOf((*MockFSx)(nil).DescribeFileSystems), varargs...)
}

// UpdateFileSystem mocks base method.
func (m *MockFSx) UpdateFileSystem(arg0 context.Context, arg1 *fsx.UpdateFileSystemInput, arg2 ...func(*fsx.Options)) (*fsx.UpdateFileSystemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFileSystem", varargs...)
	ret0, _ := ret[0].(*fsx.UpdateFileSystemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFileSystem indicates an expected call of UpdateFileSystem.
func (mr *MockFSxMockRecorder) UpdateFileSystem(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFileSystem", reflect.TypeOf((*MockFSx)(nil).UpdateFileSystem), varargs...)
}
